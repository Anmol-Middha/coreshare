import java.util.*;
import java.lang.*;
import java.nio.file.*; 
    
class StringSearch{ 
      
    static final int NO_OF_CHARS = 256; 
      
    static int max (int a, int b) { return (a > b)? a: b; } 
    
    static void badCharHeuristic( char []str, int size,int badchar[]) throws Exception
    { 
        int i; 
 
        for (i = 0; i < NO_OF_CHARS; i++) 
            badchar[i] = -1; 
 
        for (i = 0; i < size; i++) 
            badchar[(int) str[i]] = i; 
    }

    static void mooreSearch(String data,  String patt) throws Exception 
    { 
        char txt[] = data.toCharArray(); 
        char pat[] = patt.toCharArray();  
        int m = pat.length; 
        int n = txt.length; 
 
        int badchar[] = new int[NO_OF_CHARS]; 
 
        badCharHeuristic(pat, m, badchar); 
 
        int s = 0; 

        while(s <= (n - m)) { 
            int j = m-1; 

            while(j >= 0 && pat[j] == txt[s+j]) 
                j--; 
 
            if (j < 0){ 
                System.out.println("Patterns occur at shift = " + s); 
                s += (s+m < n)? m-badchar[txt[s+m]] : 1; 
            }
            else
                s += max(1, j - badchar[txt[s+j]]); 
        } 
    }

    public static void naiveBias(String data, String pat) throws Exception{
        int txtlnth = data.length();
        int patlnth = pat.length();

        for(int i = 0; i <= txtlnth-patlnth; i++){
            int j;
            for(j = 0; j < patlnth; j++){
                if(data.charAt(i+j) != pat.charAt(j)){
                    break;
                }
            }

            if(j == patlnth){
                System.out.println("Pattern found at index " + i);
            }
        }
    }

    static void rabinKarp(String txt, String pat, int q) throws Exception
    { 
        int d = 256;
        int M = pat.length(); 
        int N = txt.length(); 
        int i, j; 
        int p = 0;  
        int t = 0;  
        int h = 1; 
      
        for (i = 0; i < M-1; i++) 
            h = (h*d)%q; 
      
        for (i = 0; i < M; i++) 
        { 
            p = (d*p + pat.charAt(i))%q; 
            t = (d*t + txt.charAt(i))%q; 
        } 
      
        for (i = 0; i <= N - M; i++) 
        { 
            if ( p == t ) 
            { 
                for (j = 0; j < M; j++) 
                { 
                    if (txt.charAt(i+j) != pat.charAt(j)) 
                        break; 
                } 
      
                if (j == M) 
                    System.out.println("Pattern found at index " + i); 
            } 
      
            if ( i < N-M ) 
            { 
                t = (d*(t - txt.charAt(i)*h) + txt.charAt(i+M))%q; 
      
                if (t < 0) 
                t = (t + q); 
            } 
        } 
    } 

    static void KMPSearch(String txt, String pat) throws Exception
    { 
        int M = pat.length(); 
        int N = txt.length(); 
  
        int lps[] = new int[M]; 
        int j = 0; // index for pat[] 
  
        computeLPSArray(pat, M, lps); 
  
        int i = 0; 
        while (i < N) { 
            if (pat.charAt(j) == txt.charAt(i)) { 
                j++; 
                i++; 
            } 
            if (j == M) { 
                System.out.println("Found pattern " + "at index " + (i - j)); 
                j = lps[j - 1]; 
            } 
  
            else if (i < N && pat.charAt(j) != txt.charAt(i)) { 
                if (j != 0) 
                    j = lps[j - 1]; 
                else
                    i = i + 1; 
            } 
        } 
    } 
    static void computeLPSArray(String pat, int M, int lps[]) throws Exception
    { 
        int len = 0; 
        int i = 1; 
        lps[0] = 0; 
  
        while (i < M) { 
            if (pat.charAt(i) == pat.charAt(len)) { 
                len++; 
                lps[i] = len; 
                i++; 
            } 
            else  
            { 
                if (len != 0) { 
                    len = lps[len - 1]; 
                } 
                else  
                { 
                    lps[i] = len; 
                    i++; 
                } 
            } 
        } 
    } 

    public static void main(String []args) throws Exception{ 
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the file path");
        String filename = sc.next();
        System.out.println("Enter the pattern to be searched in file");
        String patt = sc.next();

        System.out.println("Enter 0 for Naive string-search algorithm");
        System.out.println("Enter 1 for Rabin–Karp algorithm");  
        System.out.println("Enter 2 for Knuth–Morris–Pratt algorithm");  
        System.out.println("Enter 3 for Boyer–Moore string-search algorithm");  
        System.out.println("Enter 4 for getting combined result");

        System.out.println("Enter the action value");  
        
        Scanner sc2 = new Scanner(System.in);
        String act = sc2.next();
        
        String data = "";
        data = new String(Files.readAllBytes(Paths.get(filename)));


        switch (act){
            case "0":
                long startTime = System.nanoTime();
                naiveBias(data, patt); 
                long endTime   = System.nanoTime();
                long totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                break;
            case "1":
                startTime = System.nanoTime();
                rabinKarp(data, patt, 101); 
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                break;
            case "2":
                startTime = System.nanoTime();
                KMPSearch(data, patt);
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                break;
            case "3":
                startTime = System.nanoTime();
                mooreSearch(data, patt);
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                break;
            case "4":
                System.out.println("Naive string-search algorithm");
                startTime = System.nanoTime();
                naiveBias(data, patt);
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                System.out.println("Rabin–Karp algorithm");  
                startTime = System.nanoTime();
                mooreSearch(data, patt);
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                System.out.println("Knuth–Morris–Pratt algorithm");  
                startTime = System.nanoTime();
                KMPSearch(data, patt);
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                System.out.println("Boyer–Moore string-search algorithm");  
                startTime = System.nanoTime();
                rabinKarp(data, patt, 101);
                endTime   = System.nanoTime();
                totalTime = endTime - startTime;
                System.out.println("The execution time is" + totalTime);
                break;
        }
    } 
}